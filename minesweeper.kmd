KMD
00000000: EA0000BE    ;         B main
00000004:             ; 
00000004:             ; ; Our board:
00000004:             ; ; 0, represents an empty space
00000004:             ; ; 1-8 represents the number of bombs around us
00000004:             ; ; 66 represents there is a bomb at this location
00000004:             ; ; No more than 8 bombs
00000004: 00000000    ; board   DEFW  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
00000008: 00000000    ; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0000000C: 00000000    ;  0, 0, 0, 0, 0
00000010: 00000000    ; 
00000014: 00000000    ; 
00000018: 00000000    ; 
0000001C: 00000000    ; 
00000020: 00000000    ; 
00000024: 00000000    ; 
00000028: 00000000    ; 
0000002C: 00000000    ; 
00000030: 00000000    ; 
00000034: 00000000    ; 
00000038: 00000000    ; 
0000003C: 00000000    ; 
00000040: 00000000    ; 
00000044: 00000000    ; 
00000048: 00000000    ; 
0000004C: 00000000    ; 
00000050: 00000000    ; 
00000054: 00000000    ; 
00000058: 00000000    ; 
0000005C: 00000000    ; 
00000060: 00000000    ; 
00000064: 00000000    ; 
00000068: 00000000    ; 
0000006C: 00000000    ; 
00000070: 00000000    ; 
00000074: 00000000    ; 
00000078: 00000000    ; 
0000007C: 00000000    ; 
00000080: 00000000    ; 
00000084: 00000000    ; 
00000088: 00000000    ; 
0000008C: 00000000    ; 
00000090: 00000000    ; 
00000094: 00000000    ; 
00000098: 00000000    ; 
0000009C: 00000000    ; 
000000A0: 00000000    ; 
000000A4: 00000000    ; 
000000A8: 00000000    ; 
000000AC: 00000000    ; 
000000B0: 00000000    ; 
000000B4: 00000000    ; 
000000B8: 00000000    ; 
000000BC: 00000000    ; 
000000C0: 00000000    ; 
000000C4: 00000000    ; 
000000C8: 00000000    ; 
000000CC: 00000000    ; 
000000D0: 00000000    ; 
000000D4: 00000000    ; 
000000D8: 00000000    ; 
000000DC: 00000000    ; 
000000E0: 00000000    ; 
000000E4: 00000000    ; 
000000E8: 00000000    ; 
000000EC: 00000000    ; 
000000F0: 00000000    ; 
000000F4: 00000000    ; 
000000F8: 00000000    ; 
000000FC: 00000000    ; 
00000100: 00000000    ; 
00000104:             ; boardMask
00000104: FFFFFFFF    ;         DEFW -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-
00000108: FFFFFFFF    ; 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
0000010C: FFFFFFFF    ; -1,-1,-1,-1,-1
00000110: FFFFFFFF    ; 
00000114: FFFFFFFF    ; 
00000118: FFFFFFFF    ; 
0000011C: FFFFFFFF    ; 
00000120: FFFFFFFF    ; 
00000124: FFFFFFFF    ; 
00000128: FFFFFFFF    ; 
0000012C: FFFFFFFF    ; 
00000130: FFFFFFFF    ; 
00000134: FFFFFFFF    ; 
00000138: FFFFFFFF    ; 
0000013C: FFFFFFFF    ; 
00000140: FFFFFFFF    ; 
00000144: FFFFFFFF    ; 
00000148: FFFFFFFF    ; 
0000014C: FFFFFFFF    ; 
00000150: FFFFFFFF    ; 
00000154: FFFFFFFF    ; 
00000158: FFFFFFFF    ; 
0000015C: FFFFFFFF    ; 
00000160: FFFFFFFF    ; 
00000164: FFFFFFFF    ; 
00000168: FFFFFFFF    ; 
0000016C: FFFFFFFF    ; 
00000170: FFFFFFFF    ; 
00000174: FFFFFFFF    ; 
00000178: FFFFFFFF    ; 
0000017C: FFFFFFFF    ; 
00000180: FFFFFFFF    ; 
00000184: FFFFFFFF    ; 
00000188: FFFFFFFF    ; 
0000018C: FFFFFFFF    ; 
00000190: FFFFFFFF    ; 
00000194: FFFFFFFF    ; 
00000198: FFFFFFFF    ; 
0000019C: FFFFFFFF    ; 
000001A0: FFFFFFFF    ; 
000001A4: FFFFFFFF    ; 
000001A8: FFFFFFFF    ; 
000001AC: FFFFFFFF    ; 
000001B0: FFFFFFFF    ; 
000001B4: FFFFFFFF    ; 
000001B8: FFFFFFFF    ; 
000001BC: FFFFFFFF    ; 
000001C0: FFFFFFFF    ; 
000001C4: FFFFFFFF    ; 
000001C8: FFFFFFFF    ; 
000001CC: FFFFFFFF    ; 
000001D0: FFFFFFFF    ; 
000001D4: FFFFFFFF    ; 
000001D8: FFFFFFFF    ; 
000001DC: FFFFFFFF    ; 
000001E0: FFFFFFFF    ; 
000001E4: FFFFFFFF    ; 
000001E8: FFFFFFFF    ; 
000001EC: FFFFFFFF    ; 
000001F0: FFFFFFFF    ; 
000001F4: FFFFFFFF    ; 
000001F8: FFFFFFFF    ; 
000001FC: FFFFFFFF    ; 
00000200: FFFFFFFF    ; 
00000204:             ;         ALIGN
00000204: 00C0FFEE    ; seed    DEFW    0xC0FFEE
00000208:             ; 
00000208: 45 6E 74 65 ; prompt  DEFB "Enter square to reveal: ",0
0000020C: 72 20 73 71 ; 
00000210: 75 61 72 65 ; 
00000214: 20 74 6F 20 ; 
00000218: 72 65 76 65 ; 
0000021C: 61 6C 3A 20 ; 
00000220: 00          ; 
00000221: 0A 54 68 65 ; remain  DEFB "\nThere are ",0
00000225: 72 65 20 61 ; 
00000229: 72 65 20 00 ; 
0000022D: 20 73 71 75 ; remain2 DEFB " squares remaining.\n",0
00000231: 61 72 65 73 ; 
00000235: 20 72 65 6D ; 
00000239: 61 69 6E 69 ; 
0000023D: 6E 67 2E 0A ; 
00000241: 00          ; 
00000242: 54 68 61 74 ; already DEFB "That square has already been revealed...\n", 0
00000246: 20 73 71 75 ; 
0000024A: 61 72 65 20 ; 
0000024E: 68 61 73 20 ; 
00000252: 61 6C 72 65 ; 
00000256: 61 64 79 20 ; 
0000025A: 62 65 65 6E ; 
0000025E: 20 72 65 76 ; 
00000262: 65 61 6C 65 ; 
00000266: 64 2E 2E 2E ; 
0000026A: 0A 00       ; 
0000026C: 59 6F 75 20 ; loseMsg DEFB "You stepped on a mine, you lose!\n",0
00000270: 73 74 65 70 ; 
00000274: 70 65 64 20 ; 
00000278: 6F 6E 20 61 ; 
0000027C: 20 6D 69 6E ; 
00000280: 65 2C 20 79 ; 
00000284: 6F 75 20 6C ; 
00000288: 6F 73 65 21 ; 
0000028C: 0A 00       ; 
0000028E: 59 6F 75 20 ; winMsg  DEFB "You successfully uncovered all the squares while avoiding all the mines...\n",0
00000292: 73 75 63 63 ; 
00000296: 65 73 73 66 ; 
0000029A: 75 6C 6C 79 ; 
0000029E: 20 75 6E 63 ; 
000002A2: 6F 76 65 72 ; 
000002A6: 65 64 20 61 ; 
000002AA: 6C 6C 20 74 ; 
000002AE: 68 65 20 73 ; 
000002B2: 71 75 61 72 ; 
000002B6: 65 73 20 77 ; 
000002BA: 68 69 6C 65 ; 
000002BE: 20 61 76 6F ; 
000002C2: 69 64 69 6E ; 
000002C6: 67 20 61 6C ; 
000002CA: 6C 20 74 68 ; 
000002CE: 65 20 6D 69 ; 
000002D2: 6E 65 73 2E ; 
000002D6: 2E 2E 0A 00 ; 
000002DA:             ; 
000002DA: 2A 00       ; negma DEFB "*",0
000002DC: 00010003    ; magic   DEFW    65539
000002E0: 7FFFFFFF    ; mask    DEFW    0x7FFFFFFF
000002E4: 20 20 00    ; space DEFB "  ",0
000002E7: 0A 0A 00    ; newline DEFB "\n\n",0
000002EA: 0A 00       ; oneline DEFB "\n",0
000002EC: 20 00       ; singlespace DEFB " ",0
000002EE: 4D 00       ; _M DEFB "M",0
000002F0: 41 00       ; _A DEFB "A",0
000002F2: 42 00       ; _B DEFB "B",0
000002F4: 43 00       ; _C DEFB "C",0
000002F6: 44 00       ; _D DEFB "D",0
000002F8: 45 00       ; _E DEFB "E",0
000002FA: 46 00       ; _F DEFB "F",0
000002FC: 47 00       ; _G DEFB "G",0
000002FE: 48 00       ; _H DEFB "H",0
00000300:             ; 
00000300:             ; 
00000300:             ;         ALIGN
00000300: E3A0D801    ; main    MOV R13, #0x10000
00000304: E24FBFC2    ;         ADRL R11,board
00000308:             ; 
00000308:             ; ; Your main game code goes here
00000308:             ;         
00000308:             ;         
00000308:             ;         
00000308: EB000053    ;         BL generateBoard
0000030C:             ; THE_DARK
0000030C: EB00002D    ;         BL clearScreen
00000310: EB0000AE    ;         BL printMaskedBoard
00000314: E3A05038    ;         MOV R5,#56
00000318: E3A07000    ;         MOV R7,#0
0000031C: E24F6E22    ;         ADR R6,boardMask
00000320:             ; mainloop
00000320: E796A007    ;         LDR R10,[R6,R7]
00000324: E35A0000    ;         CMP R10,#0
00000328: 1A000000    ;         BNE mainloopcon
0000032C: E2455001    ;         SUB R5,R5,#1
00000330:             ;         ;CMP R5,#0
00000330:             ;         ;BEQ WIN
00000330:             ; mainloopcon
00000330: E2877004    ;         ADD R7,R7,#4
00000334: E3570C01    ;         CMP R7,#256
00000338: AA000000    ;         BGE endd
0000033C: EAFFFFF7    ;         B mainloop
00000340:             ; 
00000340:             ;         endd
00000340:             ; 
00000340: E24F0027    ;         ADRL R0,remain
00000344: E2400C01    ; 
00000348: EF000003    ;         SWI 3
0000034C: E1A00005    ;         MOV R0,R5
00000350: EF000004    ;         SWI 4
00000354: E24F002F    ;         ADRL R0,remain2
00000358: E2400C01    ; 
0000035C: EF000003    ;         SWI 3
00000360:             ;         
00000360:             ;         callinput
00000360: EB000020    ;         BL boardSquareInput
00000364: E1A05000    ;         MOV R5,R0
00000368: E3A0A004    ;         MOV R10,#4
0000036C: E0050A95    ;         MUL R5,R5,R10
00000370: E7967005    ;         LDR R7,[R6,R5]
00000374: E3570000    ;         CMP R7,#0
00000378: 0A000007    ;         BEQ alreadydone
0000037C: E3A0A002    ;         MOV R10,#2
00000380: E79BA005    ;         LDR R10,[R11,R5]
00000384: E35A0042    ;         CMP R10,#66
00000388: 0A000007    ;         BEQ lost
0000038C: E24F6E29    ;         ADR R6,boardMask
00000390: E3A08000    ;         MOV R8,#0
00000394: E7868005    ;         STR R8,[R6,R5]
00000398: EAFFFFDB    ;         B THE_DARK
0000039C:             ; 
0000039C:             ; 
0000039C:             ;       alreadydone
0000039C: E24F0062    ;         ADRL R0,already
000003A0: E2400C01    ; 
000003A4: EF000003    ;         SWI 3   
000003A8: EAFFFFD7    ;         B THE_DARK  
000003AC:             ; 
000003AC:             ; lost 
000003AC: E24F0F52    ; ADRL R0,loseMsg
000003B0: EF000003    ;         SWI 3 
000003B4: EF000002    ;         SWI 2
000003B8:             ; 
000003B8:             ; WIN
000003B8: E24F0032    ; ADRL R0,winMsg
000003BC: E2400C01    ; 
000003C0: EF000003    ;         SWI 3 
000003C4: EF000002    ;         SWI 2
000003C8:             ; 
000003C8:             ; ; clearScreen : Clear the screen
000003C8:             ; ; Input:  none
000003C8:             ; ; Output: none
000003C8:             ; clearScreen
000003C8: E3A01000    ;     MOV R1,#0
000003CC: E24F00ED    ;     ADRL R0,newline
000003D0: EA000000    ; B clearcon
000003D4:             ; loopclear
000003D4: EF000003    ;     SWI 3
000003D8:             ; clearcon
000003D8: E2811001    ;     ADD R1,R1,#1
000003DC: E3510032    ;     CMP R1,#50
000003E0: 1AFFFFFB    ;     BNE loopclear
000003E4:             ; 
000003E4: E1A0F00E    ;     MOV PC, R14
000003E8:             ; ; boardSquareInput -- read board position from keyboard
000003E8:             ; ; Input:  R0 ---> prompt string address
000003E8:             ; ; Ouptut: R0 <--- index
000003E8:             ; 
000003E8:             ; boardSquareInput
000003E8: E8BD0402    ; LDMFD R13!,{R1,R10}
000003EC: E24F0F7B    ;     ADRL R0, prompt
000003F0: EF000003    ;     SWI 3
000003F4: E24F0015    ;     ADRL R0,newline
000003F8: E2400C01    ; 
000003FC: EF000003    ;     SWI 3
00000400:             ;     
00000400: EF000001    ;     SWI 1
00000404:             ; 
00000404:             ; firstinput 
00000404: E3500041    ;     CMP R0,#65
00000408: BAFFFFF6    ;     BLT boardSquareInput
0000040C: E3500048    ;     CMP R0,#72
00000410: CAFFFFF4    ;     BGT boardSquareInput ;finished checking the first input
00000414: E1A01000    ;     MOV R1,R0 ;saves first input in r1
00000418:             ; 
00000418: EF000001    ;     SWI 1
0000041C:             ; 
0000041C:             ; secondinput
0000041C: E3500031    ;     CMP R0,#49
00000420: BAFFFFF0    ;     BLT boardSquareInput
00000424: E3500038    ;     CMP R0,#56
00000428: CAFFFFEE    ;     BGT boardSquareInput ;finished checking the second input
0000042C: E1A02000    ;     MOV R2,R0 ;saves first seond in r2
00000430:             ;     
00000430:             ; 
00000430: EF000001    ;     SWI 1
00000434: E350000A    ;     CMP R0,#10
00000438: 1AFFFFEA    ;     BNE boardSquareInput
0000043C:             ; 
0000043C: E2411041    ;     SUB R1,R1,#65
00000440: E2422031    ;     SUB R2,R2,#49
00000444:             ;     ;8r+c
00000444: E3A00008    ;     MOV R0,#8
00000448: E0010091    ;     MUL R1,R1,R0
0000044C: E0813002    ;     ADD R3,R1,R2
00000450: E1A00003    ;     MOV R0,R3
00000454:             ; 
00000454: E92D0402    ; STMFD R13!,{R1,R10}
00000458: E1A0F00E    ;     MOV PC,R14
0000045C:             ; 
0000045C:             ; ; printMaskedBoard -- print the board 
0000045C:             ; ; Input: R0 <-- Address of board
0000045C:             ; ;        R1 <-- Address of board Mask
0000045C:             ; 
0000045C:             ; 
0000045C:             ; ; generateBoard
0000045C:             ; ; Input R0 -- array to generate board in
0000045C:             ; generateBoard
0000045C:             ;      ; Insert your subroutine here
0000045C:             ; 
0000045C:             ; 
0000045C: E51F3260    ;         LDR R3,seed
00000460: E92D07FE    ;         STMFD R13!,{R1-R10}
00000464: E24F2085    ;         ADRL R2, newline
00000468: E2422C01    ; 
0000046C:             ;         
0000046C:             ; 
0000046C:             ; ;; Your routine to generate the board should be inserted here
0000046C: E3A05001    ;         MOV R5,#1
00000470: E51F3274    ;         LDR R3,seed
00000474:             ;     loop1
00000474: E51F219C    ;         LDR R2,mask
00000478: E92D4000    ;         STMFD R13!,{R14}
0000047C: EB000048    ;         BL randu   
00000480: E89D4000    ;         LDMFD R13,{R14}
00000484: EF000004    ;         SWI 4
00000488: E1A04000    ;         MOV R4,R0
0000048C: E3A0A004    ;         MOV R10,#4
00000490: E0040A94    ;         MUL R4,R4,R10
00000494: E79B7004    ;         LDR R7,[R11,R4]
00000498: E3570042    ;         CMP R7,#66
0000049C: 0AFFFFF4    ;         BEQ loop1;
000004A0: E3A06042    ;         MOV R6,#66
000004A4: E78B6004    ;         STR R6,[R11,R4]
000004A8: E2855001    ;         ADD R5,R5,#1
000004AC:             ;         
000004AC:             ;     
000004AC:             ; 
000004AC:             ;     
000004AC:             ;     cond1
000004AC: E3550008    ;     CMP R5,#8
000004B0: DAFFFFEF    ;     BLE loop1
000004B4:             ;         ;FINISHED PRINTING THE MINES
000004B4:             ;         
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; 
000004B4:             ; ;START TO PRINT NUMBERS
000004B4: E3A01000    ;         MOV R1,#0
000004B8: E3A02000    ;         MOV R2,#0
000004BC: E3A09008    ;         MOV R9,#8
000004C0: EA00001A    ;         B con_Y
000004C4:             ;         loopY
000004C4: E3510000    ;         CMP R1,#0
000004C8:             ;         
000004C8:             ; 
000004C8:             ;         loopX
000004C8: E0030991    ;         MUL R3,R1,R9
000004CC: E0833002    ;         ADD R3,R3,R2
000004D0: E79B0003    ;         LDR R0,[R11,R3] ;trying to access the array memeber num which is inR3
000004D4: E3500042    ;         CMP R0,#66
000004D8: 1A000017    ;         BNE con_X
000004DC: E3510000    ;         CMP R1,#0 ;check if y is 0
000004E0: 0A000001    ;         BEQ y0
000004E4: E2414004    ;         SUB R4,R1,#4 ;P=Y-1
000004E8: EA000000    ;         B ynot0
000004EC:             ;         y0 
000004EC: E1A04001    ;         MOV R4,R1
000004F0:             ;         ynot0
000004F0: EA000017    ;         B con_Y2
000004F4:             ;         loopY2
000004F4: E3520000    ;         CMP R2,#0 ;start with q=x if r2 is 0
000004F8: 0A000001    ;         BEQ xisz
000004FC: E2425004    ;         SUB R5,R2,#4
00000500: EA000000    ;         B xnotz
00000504:             ;         xisz
00000504: E1A05002    ;         MOV R5,R2
00000508:             ;         xnotz
00000508:             ; 
00000508:             ;         loopX2
00000508:             ;         
00000508: E0060994    ;         MUL R6,R4,R9
0000050C: E0866005    ;         ADD R6,R6,R5
00000510: E79B0006    ;         LDR R0,[R11,R6] ;trying to access the array memeber num which is inR6
00000514: E3500042    ;         CMP R0,#66
00000518: 0A000015    ;         BEQ con_X2
0000051C: E79BA006    ;         LDR R10,[R11,R6] ;LOAD
00000520: E28AA001    ;         ADD R10,R10,#1 ;ADD
00000524: E1A0000A    ;         MOV R0,R10
00000528: E78BA006    ;         STR R10,[R11,R6];STORE
0000052C: EA000010    ;         B con_X2
00000530:             ; 
00000530:             ;         con_Y
00000530: E351001C    ;         CMP R1,#28
00000534: DAFFFFE2    ;         BLE loopY 
00000538: EA000017    ;         B printbo
0000053C:             ;         
0000053C:             ;         con_X
0000053C: E2822004    ;         ADD R2,R2,#4
00000540: E352001C    ;         CMP R2,#28
00000544: DAFFFFDF    ;         BLE loopX
00000548: E3A02000    ;         MOV R2,#0 ;so when loop start again ;)
0000054C: E2811004    ;         ADD R1,R1,#4 ; changed it place to here to start 0 then increment
00000550: EAFFFFF6    ;         B con_Y
00000554:             ;                 
00000554:             ;         
00000554:             ;         con_Y2
00000554: E351001C    ;         CMP R1,#28 ;if y=7 case 2
00000558: 0A000001    ;         BEQ yiss
0000055C: E2818004    ;         ADD R8,R1,#4
00000560: EA000000    ;         B ynots
00000564:             ;         yiss
00000564: E1A08001    ;         MOV R8,R1
00000568:             ;         ynots
00000568: E1540008    ;         CMP R4,R8
0000056C: DAFFFFE0    ;         BLE loopY2
00000570: EAFFFFF1    ;         B con_X
00000574:             ;         
00000574:             ;         con_X2
00000574: E2855004    ;         ADD R5,R5,#4
00000578: E352001C    ;         CMP R2,#28 ;IF X=7 CASE 2
0000057C: 0A000001    ;         BEQ xiss
00000580: E2828004    ;         ADD R8,R2,#4
00000584: EA000000    ;         B xnots
00000588:             ;         xiss
00000588: E1A08002    ;         MOV R8,R2
0000058C:             ;         xnots
0000058C: E1550008    ;         CMP R5,R8
00000590: DAFFFFDC    ;         BLE loopX2
00000594: E2844004    ;         ADD R4,R4,#4
00000598: EAFFFFED    ;         B con_Y2
0000059C:             ; 
0000059C:             ; 
0000059C:             ; printbo
0000059C: E89D07FE    ; LDMFD R13,{R1-R10} 
000005A0: E1A0F00E    ; MOV PC,R14 
000005A4:             ; 
000005A4:             ; 
000005A4:             ; 
000005A4:             ; ; randu -- Generates a random number
000005A4:             ; ; Input: None
000005A4:             ; ; Ouptut: R0 -> Random number
000005A4:             ; randu  
000005A4: E92D0006    ; STMFD R13!,{R1,R2}
000005A8: E51F02D4    ; LDR R0,magic
000005AC: E51F22D4    ; LDR R2,mask
000005B0: E0010390    ; MUL R1,R0,R3
000005B4: E0011002    ; AND R1, R1, R2
000005B8: E1A03001    ; MOV R3,R1
000005BC: E1A00001    ; MOV R0,R1
000005C0: E1A00440    ; MOV R0,R0 ASR #8
000005C4: E200003F    ; AND R0, R0, #0x3f  ; take the modulo by 64 
000005C8:             ; 
000005C8: E8BD0006    ; LDMFD R13!,{R1,R2}   
000005CC:             ; 
000005CC: E1A0F00E    ; MOV PC,R14
000005D0:             ; 
000005D0:             ; 
000005D0:             ; 
000005D0:             ; 
000005D0:             ; 
000005D0:             ; 
000005D0:             ; 
000005D0:             ; 
000005D0:             ; printMaskedBoard
000005D0:             ; 
000005D0: E92D07FE    ;         STMFD R13!,{R1-R10}
000005D4:             ; 
000005D4: E24F10D8    ;         ADRL R1, boardMask
000005D8: E2411B01    ; 
000005DC: E24F3C03    ;         ADRL R3, space 
000005E0: E24F0001    ;         ADRL R0, newline
000005E4: E2400C03    ; 
000005E8: EF000003    ;         SWI 3
000005EC:             ; 
000005EC: E3A02001    ;         MOV R2,#1;
000005F0: E24F0FC3    ;         ADR R0,singlespace;
000005F4: EF000003    ;         SWI 3;
000005F8:             ; eight
000005F8: E1A00003    ;         MOV R0,R3;
000005FC: EF000003    ;         SWI 3;
00000600: EF000003    ;         SWI 3;
00000604:             ; 
00000604: E1A00002    ;         MOV R0,R2
00000608: EF000004    ;         SWI 4
0000060C: E2822001    ;         ADD R2,R2,#1
00000610: E3520009    ;         CMP R2,#9
00000614: BAFFFFF7    ;         BLT eight
00000618:             ; 
00000618: E24F0039    ;         ADRL R0, newline
0000061C: E2400C03    ; 
00000620: EF000003    ;         SWI 3
00000624:             ;         
00000624: E24F0FCF    ;         ADRL R0,_A
00000628: EF000003    ;         SWI 3
0000062C: E1A00003    ;         MOV R0,R3
00000630: EF000003    ;         SWI 3
00000634:             ;         
00000634:             ; 
00000634:             ;         
00000634: E3A02000    ;         MOV R2,#0;
00000638:             ; 
00000638:             ; loop
00000638: E1A00003    ;         MOV R0,R3;
0000063C: EF000003    ;         SWI 3;
00000640: E24F0F91    ;         ADRL R0,board;
00000644: E2400B01    ; 
00000648: E24F1F53    ;         ADRL R1,boardMask
0000064C: E2411B01    ; 
00000650: E7911002    ;         LDR R1,[R1,R2]
00000654: E7900002    ;         LDR R0,[R0,R2];
00000658: E3510000    ;         CMP R1,#0
0000065C: 0A000003    ;         BEQ notne
00000660: E24F008E    ;         ADRL R0,negma
00000664: E2400C03    ; 
00000668: EF000003    ;         SWI 3
0000066C: EA00000A    ;         B PRINTNEWLINE
00000670:             ; notne
00000670:             ;         
00000670:             ; 
00000670: E3500000    ;         CMP R0,#0;
00000674: 1A000002    ;         BNE sec;
00000678: E24F0FE5    ;         ADRL R0,singlespace;
0000067C: EF000003    ;         SWI 3;
00000680: EA000005    ;         B check
00000684:             ;         
00000684:             ;         sec
00000684: E3500042    ;         CMP R0,#66;
00000688: 1A000002    ;         BNE num;
0000068C: E24F00A6    ;         ADRL R0,_M;
00000690: E2400C03    ; 
00000694: EA000000    ;         B check
00000698:             ;         
00000698:             ;         num
00000698: EF000004    ;         SWI 4;
0000069C:             ;         PRINTNEWLINE
0000069C:             ;         check
0000069C: E1A00003    ;         MOV R0,R3;
000006A0: EF000003    ;         SWI 3;
000006A4: E2822004    ;         ADD R2,R2,#4;
000006A8:             ;         
000006A8:             ;         
000006A8: E3520020    ;         CMP R2,#32;
000006AC: 1A000008    ;         BNE l2;
000006B0: E24F00D1    ;         ADRL R0, newline
000006B4: E2400C03    ; 
000006B8: EF000003    ;         SWI 3
000006BC: E24F00D2    ;         ADRL R0,_B
000006C0: E2400C03    ; 
000006C4: EF000003    ;         SWI 3
000006C8: E1A00003    ;         MOV R0,R3
000006CC: EF000003    ;         SWI 3
000006D0: EAFFFFFF    ;         B l2
000006D4:             ; 
000006D4:             ;         l2
000006D4: E3520040    ;         CMP R2,#64
000006D8: 1A000007    ;         BNE l3;
000006DC: E24F00FD    ;         ADRL R0, newline
000006E0: E2400C03    ; 
000006E4: EF000003    ;         SWI 3
000006E8: E24F0FFF    ;         ADRL R0,_C
000006EC: EF000003    ;         SWI 3
000006F0: E1A00003    ;         MOV R0,R3
000006F4: EF000003    ;         SWI 3
000006F8: EAFFFFFF    ;         B l3
000006FC:             ; 
000006FC:             ;         l3
000006FC: E3520060    ;         CMP R2,#96
00000700: 1A000008    ;         BNE l4;
00000704: E24F0025    ;         ADRL R0, newline
00000708: E2400B01    ; 
0000070C: EF000003    ;         SWI 3
00000710: E24F0022    ;         ADRL R0,_D
00000714: E2400B01    ; 
00000718: EF000003    ;         SWI 3
0000071C: E1A00003    ;         MOV R0,R3
00000720: EF000003    ;         SWI 3
00000724: EAFFFFFF    ;         B l4
00000728:             ;  l4
00000728: E3520080    ;         CMP R2,#128
0000072C: 1A000008    ;         BNE l5;
00000730: E24F0051    ;         ADRL R0, newline
00000734: E2400B01    ; 
00000738: EF000003    ;         SWI 3
0000073C: E24F004C    ;         ADRL R0,_E
00000740: E2400B01    ; 
00000744: EF000003    ;         SWI 3
00000748: E1A00003    ;         MOV R0,R3
0000074C: EF000003    ;         SWI 3
00000750: EAFFFFFF    ;         B l5
00000754:             ;         
00000754:             ;         l5
00000754: E35200A0    ;         CMP R2,#160
00000758: 1A000008    ;         BNE l6;
0000075C: E24F007D    ;         ADRL R0, newline
00000760: E2400B01    ; 
00000764: EF000003    ;         SWI 3
00000768: E24F0076    ;         ADRL R0,_F
0000076C: E2400B01    ; 
00000770: EF000003    ;         SWI 3
00000774: E1A00003    ;         MOV R0,R3
00000778: EF000003    ;         SWI 3
0000077C: EAFFFFFF    ;         B l6
00000780:             ; 
00000780:             ;         l6
00000780: E35200C0    ;         CMP R2,#192
00000784: 1A000007    ;         BNE l7;
00000788: E24F00A9    ;         ADRL R0, newline
0000078C: E2400B01    ; 
00000790: EF000003    ;         SWI 3
00000794:             ;         
00000794: E24F0E4A    ;         ADRL R0,_G
00000798: EF000003    ;         SWI 3
0000079C: E1A00003    ;         MOV R0,R3
000007A0: EF000003    ;         SWI 3
000007A4: EAFFFFFF    ;         B l7
000007A8:             ; 
000007A8:             ; 
000007A8:             ;         l7
000007A8: E35200E0    ;         CMP R2,#224
000007AC: 1A000008    ;         BNE loop_condition;
000007B0: E24F00D1    ;         ADRL R0, newline
000007B4: E2400B01    ; 
000007B8: EF000003    ;         SWI 3
000007BC: E24F00C6    ;         ADRL R0,_H
000007C0: E2400B01    ; 
000007C4: EF000003    ;         SWI 3
000007C8: E1A00003    ;         MOV R0,R3
000007CC: EF000003    ;         SWI 3
000007D0: EAFFFFFF    ;         B loop_condition
000007D4:             ; 
000007D4:             ;         loop_condition
000007D4: E3520C01    ;         CMP R2,#256
000007D8: BAFFFF96    ;         BLT loop
000007DC:             ;         
000007DC:             ; 
000007DC: E89D07FE    ;         LDMFD R13,{R1-R10}
000007E0: E1A0F00E    ;         MOV PC,R14
000007E4:             ; 
000007E4:             ; 
000007E4:             ; 

Symbol Table: Labels
: board                             00000004  Local -- ARM
: boardMask                         00000104  Local -- ARM
: seed                              00000204  Local -- ARM
: prompt                            00000208  Local -- ARM
: remain                            00000221  Local -- ARM
: remain2                           0000022D  Local -- ARM
: already                           00000242  Local -- ARM
: loseMsg                           0000026C  Local -- ARM
: winMsg                            0000028E  Local -- ARM
: negma                             000002DA  Local -- ARM
: magic                             000002DC  Local -- ARM
: mask                              000002E0  Local -- ARM
: space                             000002E4  Local -- ARM
: newline                           000002E7  Local -- ARM
: oneline                           000002EA  Local -- ARM
: singlespace                       000002EC  Local -- ARM
: _M                                000002EE  Local -- ARM
: _A                                000002F0  Local -- ARM
: _B                                000002F2  Local -- ARM
: _C                                000002F4  Local -- ARM
: _D                                000002F6  Local -- ARM
: _E                                000002F8  Local -- ARM
: _F                                000002FA  Local -- ARM
: _G                                000002FC  Local -- ARM
: _H                                000002FE  Local -- ARM
: main                              00000300  Local -- ARM
: THE_DARK                          0000030C  Local -- ARM
: mainloop                          00000320  Local -- ARM
: mainloopcon                       00000330  Local -- ARM
: endd                              00000340  Local -- ARM
: callinput                         00000360  Local -- ARM
: alreadydone                       0000039C  Local -- ARM
: lost                              000003AC  Local -- ARM
: WIN                               000003B8  Local -- ARM
: clearScreen                       000003C8  Local -- ARM
: loopclear                         000003D4  Local -- ARM
: clearcon                          000003D8  Local -- ARM
: boardSquareInput                  000003E8  Local -- ARM
: firstinput                        00000404  Local -- ARM
: secondinput                       0000041C  Local -- ARM
: generateBoard                     0000045C  Local -- ARM
: loop1                             00000474  Local -- ARM
: cond1                             000004AC  Local -- ARM
: loopY                             000004C4  Local -- ARM
: loopX                             000004C8  Local -- ARM
: y0                                000004EC  Local -- ARM
: ynot0                             000004F0  Local -- ARM
: loopY2                            000004F4  Local -- ARM
: xisz                              00000504  Local -- ARM
: xnotz                             00000508  Local -- ARM
: loopX2                            00000508  Local -- ARM
: con_Y                             00000530  Local -- ARM
: con_X                             0000053C  Local -- ARM
: con_Y2                            00000554  Local -- ARM
: yiss                              00000564  Local -- ARM
: ynots                             00000568  Local -- ARM
: con_X2                            00000574  Local -- ARM
: xiss                              00000588  Local -- ARM
: xnots                             0000058C  Local -- ARM
: printbo                           0000059C  Local -- ARM
: randu                             000005A4  Local -- ARM
: printMaskedBoard                  000005D0  Local -- ARM
: eight                             000005F8  Local -- ARM
: loop                              00000638  Local -- ARM
: notne                             00000670  Local -- ARM
: sec                               00000684  Local -- ARM
: num                               00000698  Local -- ARM
: PRINTNEWLINE                      0000069C  Local -- ARM
: check                             0000069C  Local -- ARM
: l2                                000006D4  Local -- ARM
: l3                                000006FC  Local -- ARM
: l4                                00000728  Local -- ARM
: l5                                00000754  Local -- ARM
: l6                                00000780  Local -- ARM
: l7                                000007A8  Local -- ARM
: loop_condition                    000007D4  Local -- ARM
